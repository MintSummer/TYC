#include<bits/stdc++.h>
using namespace std;
const int MAXN=1e6+5;
char st[210][MAXN],ques[MAXN];
int n,cnt=0,q[2000010];
struct Q
{
    int pos,tim;
}a[210];

struct node
{
    int cnt,fail,end[6],son[26];
}AC[MAXN*10];

inline void insert(char ch[],int num)
{
    int now=0,len=strlen(ch);
    for(int i=0;i<len;i++)
    {
	int tmp=ch[i]-'a';
	if(!AC[now].son[tmp]) AC[now].son[tmp]=++cnt;
	now=AC[now].son[tmp];
    }
    AC[now].end[++AC[now].cnt]=num;
}

inline void get_fail()
{
    int h=0,t=0;
    for(int i=0;i<26;i++)
	if(AC[0].son[i]) 
	    AC[AC[0].son[i]].fail=0,q[++t]=AC[0].son[i];
    while(h<t)
    {
	int now=q[++h];
	for(int i=0;i<26;i++)
	    if(AC[now].son[i])
	    {
		AC[AC[now].son[i]].fail=AC[AC[now].fail].son[i];
		q[++t]=AC[now].son[i];
	    }
	    else AC[now].son[i]=AC[AC[now].fail].son[i];
    }
}

void ask()
{
    for(int i=1;i<=n;i++)
    {
	int len=strlen(st[i]),now=0;
	for(int j=0;j<len;j++)
	{
	    int tmp=st[i][j]-'a';
	    now=AC[now].son[tmp];
	    for(int k=now;k;k=AC[k].fail)
		for(int d=1;d<=AC[k].cnt;d++)
		    a[AC[k].end[d]].tim++;
	}
    }
}

int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
	scanf("%s",st[i]);
	insert(st[i],i);
	a[i].tim=0,a[i].pos=i;
    }
    get_fail();
    ask();
    for(int i=1;i<=n;i++)
	printf("%d\n",a[i].tim);
    return 0;
}
