#include<bits/stdc++.h>
using namespace std;
long long a[25],n;
int ans[2<<20],k,getans[25],t=0;
queue<int> q;

void dfs(int root,int tim,int num,int flag,int before)
{
	if(flag==1) ans[root]=ans[root/2]+1;
	if(flag==0) ans[root]=before+1;
	if(flag==-1) ans[root]=0;
	int ln=0;
	for(int i=0;i<num-1;i++)
		if(tim>a[i]*a[num-i-1]) 
		{
			ans[root]++,tim-=a[i]*a[num-i-1];
			ln++;
		}
		else break;
	dfs(root*2,tim,ln,0,before);
	if(ans[root]!=ans[root/2/2]-1&&ans[root]!=k-1&&ans[root]!=ans[root/2]-1) dfs(root*2+1,tim,num-ln-1,1,ans[root]);
}

void bfs()
{
	q.push(1);
	int root;
	getans[++t]=ans[1];
	while(!q.empty())
	{
		root=q.front();
		q.pop();
		if(ans[root*2]!=-1) q.push(root*2),getans[++t]=ans[root*2];
		if(ans[root*2+1]!=-1) q.push(root*2+1),getans[++t]=ans[root*2+1];
	}
}

int main()
{
	memset(ans,-1,sizeof(ans));
	a[0]=1,a[1]=1,a[2]=2,a[3]=5,a[4]=14;
	scanf("%lld%d",&n,&k);
	for(int i=5;i<=k;i++)
		for(int j=0;j<=i-1;j++) a[i]+=a[j]*a[i-j-1];
	dfs(1,n,k,-1,-1);
	bfs();
	char ch;
	for(int i=1;i<=t;i++)
	{
		ch='a'+getans[i];
		printf("%c",ch);
	}
	return 0;
}
