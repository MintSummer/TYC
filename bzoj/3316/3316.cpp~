#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

namespace TYC
{
	const int N=2e5+10;
	typedef long long ll;
	typedef long double ld;
	const ld eps=1e-8;
	int n,L,R,a[N],q[2][N],h[2],t[2];
	ll fenmu,fenzi;
	ld sum[N<<1];

	inline int read()
	{
		int x=0,f=0;char ch=getchar();
		while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();
		while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();
		return f?-x:x;
	}

	bool check(ld x)
	{
		for(int i=1;i<=n;i++) 
			sum[i]=sum[i-1]+a[i]-x;
		h[0]=h[1]=1,t[0]=t[1]=0;
		for(int i=L;i<=n;i++)
		{
			int st=i-L,now=i&1;
			while(h[now]<=t[now]&&sum[st]<sum[q[now][t[now]]]) t[now]--;
			q[now][++t[now]]=st;
			while(h[now]<=t[now]&&i-q[now][h[now]]) h[now]++;
			if(sum[i]-sum[q[now][h[now]]]>0)
			{
				fenmu=i-q[now][h[now]];
				return true;
			}
		}
		return false;
	}

	ll gcd(ll x,ll y)
	{
		return y==0?x:gcd(y,x%y);
	}

	void work()
	{
		n=read(),L=read(),R=read();
		L+=(L&1),R-=(R&1);
		int mx=0;
		for(int i=1;i<=n;i++) 
		{
			a[i]=read(),a[i+n]=a[i];
			mx=max(mx,a[i]);
		}
		n<<=1;
		ld l=0,r=mx,mid,ans;
		while(r-l>eps)
		{
			mid=(l+r)/2;
			if(check(mid)) ans=mid,l=mid+eps;
			else r=mid-eps;
		}
		fenzi=(ll)(ans*fenmu+0.5);
		ll g=gcd(fenzi,fenmu);
		fenzi/=g,fenmu/=g;
		if(fenmu==1) printf("%lld\n",fenzi);
		else printf("%lld/%lld\n",fenzi,fenmu);
	}
}

int main()
{
	TYC::work();
	return 0;
}
