#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<iostream>
#include<algorithm>
using namespace std;
#define maxn 300010

struct node
{
    int x,y,c,next;
}a[maxn*8];int len,first[maxn];
void ins(int x,int y,int c)
{
    len++;a[len].x=x;a[len].y=y;a[len].c=c;
    a[len].next=first[x];first[x]=len;
}
struct nod
{
    int x,id;
    bool operator < (const nod y) const
    {
        return x>y.x;
    }
};int S,T,d[maxn];
priority_queue<nod> q;
int dijkstra()
{
    memset(d,63,sizeof(d));
    nod ls;ls.id=S;ls.x=0;
    d[S]=0;q.push(ls);
    while (!q.empty())
    {
        nod now=q.top();q.pop();
        int x=now.id;
        if (now.x!=d[x]) continue;
        if (x==T) return d[x];
        for (int k=first[x];k!=-1;k=a[k].next)
        {
            int y=a[k].y;
            if (d[y]>d[x]+a[k].c)
            {
                d[y]=d[x]+a[k].c;
                ls.id=y;ls.x=d[y];
                q.push(ls);
            }
        }
    }
    return d[T];
}
int main()
{
    //freopen("a.in","r",stdin);
    freopen("ans.out","w",stdout);
    int n,i,j,x;
    scanf("%d",&n);
    S=n*n+1;T=S+1;len=0;
    memset(first,-1,sizeof(first));
    for (i=0;i<=n;i++)
     for (j=1;j<=n;j++)
     {
         scanf("%d",&x);
         if (i==0) ins(i*n+j,T,x);
         else if (i==n) ins(S,(i-1)*n+j,x);
         else ins(i*n+j,(i-1)*n+j,x);
     }
    for (i=1;i<=n;i++)
     for (j=0;j<=n;j++)
     {
         scanf("%d",&x);
         if (j==0) ins(S,(i-1)*n+1,x);
         else if (j==n) ins(i*n,T,x);
         else ins((i-1)*n+j,(i-1)*n+j+1,x);
     }
    for (i=0;i<=n;i++)
     for (j=1;j<=n;j++)
     {
         scanf("%d",&x);
         if (i==0) ins(T,i*n+j,x);
         else if (i==n) ins((i-1)*n+j,S,x);
         else ins((i-1)*n+j,i*n+j,x);
     }
    for (i=1;i<=n;i++)
     for (j=0;j<=n;j++)
     {
         scanf("%d",&x);
         if (j==0) ins((i-1)*n+1,S,x);
         else if (j==n) ins(T,i*n,x);
         else ins((i-1)*n+j+1,(i-1)*n+j,x);
     }
	for(int i=1;i<=len;i++) printf("%d %d %d\n",a[i].x,a[i].y,a[i].c);
    //printf("%d\n",dijkstra());
    return 0;
}
