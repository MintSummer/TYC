#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

namespace TYC
{
	const int N=100010;
	int n,tot,dp[N];

	inline int read()
	{
		int x=0,f=0;char ch=getchar();
		while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();
		while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();
		return f?-x:x;
	}
	
	struct Interval
	{
		int l,r,val;
		bool operator != (const Interval &a) const
		{
			return l!=a.l||r!=a.r;
		}
	}x[N];

	bool cmp1 (const Interval &a,const Interval &b) 
	{
		return (a.l<b.l)||(a.l==b.l&&a.r<b.r);
	}

	bool cmp2(const Interval &a,const Interval &b)
	{
		return (a.r<b.r)||(a.r==b.r&&a.l<b.l);
	}

	inline int find(int l,int r,int val)
	{
		int ans=0;
		while(l<=r)
		{
			int mid=(l+r)>>1;
			if(mid<=val) ans=mid,l=mid+1;
			else r=mid-1;
		}
		return ans;
	}

	void work()
	{
		n=read();
		for(int i=1;i<=n;i++)
		{
			int a=read(),b=read();
			x[i]=(Interval){a+1,n-b,1};
		}
		sort(x+1,x+1+n,cmp1);
		for(int i=1;i<=n;i++)
		{
			if(x[i].l>x[i].r) continue;
			if(x[i]!=x[tot]) x[++tot]=x[i];
			else x[tot].val++;
		}
		sort(x+1,x+1+tot,cmp2);
		for(int i=1;i<=tot;i++)
		{
			int k=find(1,i-1,x[i].l);
			dp[i]=max(dp[i-1],dp[k]+x[i].val);
		}
		printf("%d\n",n-dp[tot]);
	}
}

int main()
{
	TYC::work();
	return 0;
}
