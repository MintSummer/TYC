#include<bits/stdc++.h>
using namespace std;
const int N=300010;

namespace ZPS
{
	int fa[N],val[N],tag[N],ls[N],rs[N],dis[N];

	inline void pushdown(int root)
	{
		int t=tag[root];
		val[ls[root]]+=t,val[rs[root]]+=t;
		tag[ls[root]]+=t,tag[rs[root]]+=t;
		tag[root]=0;
	}

	int merge(int x,int y)
	{
		if(!x||!y) return x+y;
		if(val[x]<val[y]) swap(x,y);
		pushdown(x);
		rs[x]=merge(rs[x],y);
		fa[rs[x]]=x;
		if(dis[ls[x]]<dis[rs[x]]) swap(ls[x],rs[x]);
		dis[x]=dis[rs[x]];
		return x;
	}

	void del(int x)
	{
		pushdown(x);
		int f=fa[x];
		fa[ls[x]]=fa[rs[x]]=0;
		int tmp=merge(ls[x],rs[x]);
		if(f) 
		{
			if(x==ls[f]) ls[f]=tmp;
			else rs[f]=tmp;
			fa[tmp]=f;
		}
		while(f)
		{
			if(dis[ls[f]]<dis[rs[f]]) swap(ls[f],rs[f]);
			dis[f]=dis[rs[f]]+1;
			f=fa[f];
		}
	}
}

namespace TYC
{
	using namespace ZPS;
	int n,m,tag_all,a[N];
	multiset<int> s;

	inline int read()
	{
		int x=0,f=0;char ch=getchar();
		while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();
		while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();
		return f?-x:x;
	}

	inline int find(int x)
	{
		while(fa[x]) x=fa[x];
		return x;
	}

	void work()
	{
		n=read();
		for(int i=1;i<=n;i++) 
			dis[i]=1,val[i]=read(),s.insert(val[i]);
		m=read();	
		char ch[5];
		int x,y,fx,fy,w,root,sum,tmp;
		while(m--)
		{
			scanf("%s",ch);
			switch(ch[0])
			{
				case 'U': 
					x=read(),y=read();
					fx=find(x),fy=find(y);
					s.erase(s.find(val[fx]));
					s.erase(s.find(val[fy]));
					s.insert(val[merge(fx,fy)]);
					break;
				case 'A':
				{
					switch(ch[1])
					{
						case '1':
							x=read(),w=read();
							root=find(x);
							s.erase(s.find(val[root]));
							sum=val[x],tmp=x;;
							while(fa[tmp]) tmp=fa[tmp],sum+=tag[tmp];
							del(x);
							val[x]=sum+w;
							if(x==root) root=find(ls[x]);
							fa[x]=ls[x]=rs[x]=tag[x]=0,dis[x]=1;
							s.insert(val[merge(root,x)]);
							break;
						case '2': 
							x=read(),w=read();
							root=find(x);
							s.erase(s.find(val[root]));
							val[root]+=w,tag[root]+=w;
							s.insert(val[root]);
							break;
						case '3': 
							tag_all+=read();
							break;
					}
					break;
				}
				case 'F':
				{
					switch(ch[1])
					{
						case '1': 
							x=read();
							sum=val[x];
							while(fa[x]) x=fa[x],sum+=tag[x];
							printf("%d\n",sum+tag_all);
							break;
						case '2':
							x=read(),root=find(x);
							printf("%d\n",val[root]+tag_all);
							break;
						case '3':
							printf("%d\n",*(s.rbegin())+tag_all);
							break;
					}
					break;
				}
			}
		}
	}
}

int main()
{
	TYC::work();
	return 0;
}
