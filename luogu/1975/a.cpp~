#include<bits/stdc++.h>
using namespace std;
inline int read(){
    int x=0,f=1;char ch=getchar();
    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}
    while(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}
    return f*x;
}
const int N=20010;
int n,m,ans,block,tot;
int bel[N];
struct node{
    int v,vt,id;
}a[N];
inline int cmpvt(node x,node y){return x.vt<y.vt;}
inline int cmpid(node x,node y){return x.id<y.id;}
struct bittree{
    int a[N];
    int lb(int x){return x&-x;}
    int query(int x){
        int ret=0;
        while(x){
            ret+=a[x];
            x-=lb(x);
        }
        return ret;
    }
    void add(int x,int p){
        while(x<=n){
            a[x]+=p;
            x+=lb(x);
        }
    }
}bit,b[151];
void solve(int x,int y){
    int t1=bel[x]+1,t2=bel[y]-1;
    if(t1<=t2){
        for(int i=t1;i<=t2;i++){
            ans-=b[i].query(a[x].v-1);
            ans+=b[i].query(n)-b[i].query(a[x].v);
            ans+=b[i].query(a[y].v-1);
            ans-=b[i].query(n)-b[i].query(a[y].v);
        }
        for(int i=x+1;i<=bel[x]*block;i++){
            if(a[x].v>a[i].v)--ans;
            else if(a[x].v<a[i].v)++ans;
            if(a[y].v>a[i].v)++ans;
            else if(a[y].v<a[i].v)--ans;
        }
        for(int i=y-1;i>(bel[y]-1)*block;i--){
            if(a[x].v>a[i].v)--ans;
            else if(a[x].v<a[i].v)++ans;
            if(a[y].v>a[i].v)++ans;
            else if(a[y].v<a[i].v)--ans;
        }
    }
    else{
        for(int i=x+1;i<y;i++){
            if(a[x].v>a[i].v)--ans;
            else if(a[x].v<a[i].v)++ans;
            if(a[y].v>a[i].v)++ans;
            else if(a[y].v<a[i].v)--ans;
        }
    }
    if(a[x].v<a[y].v)ans++;
    else if(a[x].v>a[y].v)ans--;
}
void update(int x,int y){
    b[bel[x]].add(a[x].v,-1);
    b[bel[y]].add(a[y].v,-1);
    swap(a[x].v,a[y].v);
    b[bel[x]].add(a[x].v,1);
    b[bel[y]].add(a[y].v,1);
}
int main(){
    n=read();
    for(int i=1;i<=n;i++){
        a[i].vt=read();a[i].id=i;
    }
    sort(a+1,a+n+1,cmpvt);
    tot=0;ans=0;
    for(int i=1;i<=n;i++)
        if(a[i].vt!=a[i-1].vt)a[i].v=++tot;
        else a[i].v=tot;
    sort(a+1,a+n+1,cmpid);
    for(int i=1;i<=n;i++){
        ans+=bit.query(n)-bit.query(a[i].v);
        bit.add(a[i].v,1);
    }
    printf("%d\n",ans);
    block=(int)sqrt(n);
    for(int i=1;i<=n;i++)bel[i]=(i-1)/block+1;
    for(int i=1;i<=n;i++)b[bel[i]].add(a[i].v,1);
    m=read();
    for(int i=1;i<=m;i++){
        //ans=0;
        int x=read(),y=read();
        if(x>y)swap(x,y);
        solve(x,y);
        printf("%d\n",ans);
        update(x,y);
    }
    return 0;
}
