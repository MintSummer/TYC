#include<bits/stdc++.h>
using namespace std;

namespace TYC
{
	const int dx[5]={0,0,0,1,-1},dy[5]={0,1,-1,0,0};
	const int N=510,inf=0x3f3f3f3f;
	int n,m,cnt,G[N][N],vis[N][N];

	inline int read()
	{
		int x=0,f=0;char ch=getchar();
		while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();
		while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();
		return f?-x:x;
	}

	struct interval
	{
		int l,r;
		bool operator < (const interval &t) const
		{
			return (l<t.l)||(l==t.l&&r>t.r);
		}
	}a[N][N];

	void dfs(int x,int y)
	{
		vis[x][y]=1;
		for(int i=1;i<=4;i++)
		{
			int xx=x+dx[i],yy=y+dy[i];
			if(xx<1||xx>n||yy<1||yy>m) continue;
			if(G[x][y]>G[xx][yy])
			{
				if(!vis[xx][yy]) dfs(xx,yy);
				a[x][y].l=min(a[x][y].l,a[xx][yy].l);
				a[x][y].r=max(a[x][y].r,a[xx][yy].r);
			}
		}
	}

	void work()
	{
		n=read(),m=read();
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				G[i][j]=read(),a[i][j].l=inf;
		for(int i=1;i<=m;i++)
			a[n][i].l=a[n][i].r=i;
		for(int i=1;i<=m;i++) 
			if(!vis[1][i]) dfs(1,i);
		int tot=0,ans=0;
		for(int i=1;i<=m;i++)
			tot+=(!vis[n][i]);
		if(tot) {printf("0\n%d\n",tot);return;}
		sort(a[1]+1,a[1]+1+m);
		for(int i=1,r,maxr,num,j;i<=m&&r!=n;i=num)
		{
			ans++;
			j=i,r=a[1][i].r;
			maxr=r,num=i+1;
			while(j<=m&&a[1][j].l<=r) 
			{
				if(a[1][j].r>maxr)
					maxr=a[1][j].r,num=j;
				j++;
			}
		}
		printf("1\n%d\n",ans);
	}
}	

int main()
{
	TYC::work();
	return 0;
}
