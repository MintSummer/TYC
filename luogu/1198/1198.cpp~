#include<bits/stdc++.h>
using namespace std;
const int MAXN=200010;
int P,a[MAXN],m,len=0;

struct node
{
	int l,r;
	int mx;
}tree[MAXN*4];

void build(int root,int lt,int rt)
{
	tree[root].l=lt,tree[root].r=rt;
	tree[root].mx=-0x3f3f3f3f;
	if(lt==rt) return;
	int mid=(lt+rt)>>1;
	build(root*2,lt,mid);
	build(root*2+1,mid+1,rt);
}

void change(int root,int s,int val)
{
	int lt=tree[root].l,rt=tree[root].r;
	if(lt==s&&rt==s) {tree[root].mx=val;return;}
	int mid=(lt+rt)>>1;
	if(s<=mid) change(root*2,s,val);
	else change(root*2+1,s,val);
	tree[root].mx=max(tree[root*2].mx,tree[root*2+1].mx);
}
	
int ask(int root,int s,int e)
{
	int lt=tree[root].l,rt=tree[root].r;
	if(s>rt||e<lt) return 0;
	if(s>=lt&&rt<=e) return tree[root].mx;
	int mid=(lt+rt)>>1;
	return max(ask(root*2,s,e),ask(root*2+1,s,e));
}

int main()
{
	scanf("%d%d",&m,&P);
	build(1,1,m);
	char ch[5];
	int x,t=0;
	while(m--)
	{
		scanf("%s%d",ch,&x);
		if(ch[0]=='A') x=(x+t)%P,len++,change(1,len,x);
		else t=ask(1,len-x+1,len),printf("%d\n",t);
	}
	return 0;
}
